
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package syntax;

import syntax.ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\004\000\002\002\004\000\002\003" +
    "\023\000\002\004\003\000\002\005\002\000\002\005\004" +
    "\000\002\006\010\000\002\007\002\000\002\007\004\000" +
    "\002\010\002\000\002\010\004\000\002\010\004\000\002" +
    "\011\016\000\002\012\002\000\002\012\004\000\002\012" +
    "\004\000\002\014\005\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\015\004\000\002\016\002\000" +
    "\002\016\003\000\002\017\003\000\002\017\005\000\002" +
    "\020\002\000\002\020\003\000\002\021\003\000\002\021" +
    "\005\000\002\022\013\000\002\022\006\000\002\022\005" +
    "\000\002\022\011\000\002\022\007\000\002\023\003\000" +
    "\002\023\003\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\004\000\002\023\010\000\002\023\006" +
    "\000\002\023\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\004\004\005\001\002\000\004\002\173\001" +
    "\002\000\004\047\012\001\002\000\006\002\ufffd\004\ufffd" +
    "\001\002\000\006\002\001\004\011\001\002\000\006\002" +
    "\ufffc\004\ufffc\001\002\000\004\047\012\001\002\000\034" +
    "\015\ufffe\016\ufffe\021\ufffe\023\ufffe\024\ufffe\027\ufffe\036" +
    "\ufffe\037\ufffe\040\ufffe\041\ufffe\043\ufffe\044\ufffe\045\ufffe" +
    "\001\002\000\006\021\ufffa\027\014\001\002\000\004\047" +
    "\012\001\002\000\004\021\016\001\002\000\014\010\ufff8" +
    "\022\ufff8\025\ufff8\031\ufff8\047\ufff8\001\002\000\014\010" +
    "\024\022\025\025\023\031\027\047\022\001\002\000\014" +
    "\010\ufff7\022\ufff7\025\ufff7\031\ufff7\047\ufff7\001\002\000" +
    "\004\047\012\001\002\000\004\047\ufff0\001\002\000\004" +
    "\047\uffee\001\002\000\010\025\023\031\027\047\022\001" +
    "\002\000\006\002\ufffb\004\ufffb\001\002\000\014\010\ufff6" +
    "\022\ufff6\025\ufff6\031\ufff6\047\ufff6\001\002\000\004\047" +
    "\uffef\001\002\000\004\047\012\001\002\000\004\023\032" +
    "\001\002\000\012\024\uffec\025\023\031\027\047\022\001" +
    "\002\000\006\024\uffeb\045\146\001\002\000\006\024\uffea" +
    "\045\uffea\001\002\000\004\047\012\001\002\000\004\024" +
    "\037\001\002\000\004\021\040\001\002\000\022\013\ufff4" +
    "\021\ufff4\025\ufff4\030\ufff4\031\ufff4\033\ufff4\035\ufff4\047" +
    "\ufff4\001\002\000\022\013\042\021\051\025\023\030\050" +
    "\031\027\033\052\035\043\047\044\001\002\000\004\015" +
    "\135\001\002\000\004\023\131\001\002\000\006\037\ufffe" +
    "\047\ufff0\001\002\000\024\013\ufff2\021\ufff2\022\ufff2\025" +
    "\ufff2\030\ufff2\031\ufff2\033\ufff2\035\ufff2\047\ufff2\001\002" +
    "\000\024\013\ufff3\021\ufff3\022\ufff3\025\ufff3\030\ufff3\031" +
    "\ufff3\033\ufff3\035\ufff3\047\ufff3\001\002\000\004\037\126" +
    "\001\002\000\004\023\120\001\002\000\022\013\ufff4\021" +
    "\ufff4\022\ufff4\025\ufff4\030\ufff4\031\ufff4\035\ufff4\047\ufff4" +
    "\001\002\000\020\023\053\032\054\034\057\042\062\046" +
    "\056\047\012\050\060\001\002\000\020\023\053\032\054" +
    "\034\057\042\062\046\056\047\012\050\060\001\002\000" +
    "\004\047\012\001\002\000\024\015\uffd4\016\uffd4\024\uffd4" +
    "\036\uffd4\040\uffd4\041\uffd4\043\uffd4\044\uffd4\045\uffd4\001" +
    "\002\000\024\015\uffdf\016\uffdf\024\uffdf\036\uffdf\040\uffdf" +
    "\041\uffdf\043\uffdf\044\uffdf\045\uffdf\001\002\000\024\015" +
    "\uffd3\016\uffd3\024\uffd3\036\uffd3\040\uffd3\041\uffd3\043\uffd3" +
    "\044\uffd3\045\uffd3\001\002\000\024\015\uffde\016\uffde\024" +
    "\uffde\036\uffde\040\uffde\041\uffde\043\uffde\044\uffde\045\uffde" +
    "\001\002\000\020\015\071\016\107\036\064\040\067\041" +
    "\066\043\065\044\070\001\002\000\020\023\053\032\054" +
    "\034\057\042\062\046\056\047\012\050\060\001\002\000" +
    "\024\015\071\016\uffd7\024\uffd7\036\uffd7\040\uffd7\041\uffd7" +
    "\043\uffd7\044\uffd7\045\uffd7\001\002\000\020\023\053\032" +
    "\054\034\057\042\062\046\056\047\012\050\060\001\002" +
    "\000\020\023\053\032\054\034\057\042\062\046\056\047" +
    "\012\050\060\001\002\000\020\023\053\032\054\034\057" +
    "\042\062\046\056\047\012\050\060\001\002\000\020\023" +
    "\053\032\054\034\057\042\062\046\056\047\012\050\060" +
    "\001\002\000\020\023\053\032\054\034\057\042\062\046" +
    "\056\047\012\050\060\001\002\000\004\047\012\001\002" +
    "\000\004\023\073\001\002\000\022\023\053\024\uffe8\032" +
    "\054\034\057\042\062\046\056\047\012\050\060\001\002" +
    "\000\006\024\uffe7\045\100\001\002\000\004\024\077\001" +
    "\002\000\022\015\071\024\uffe6\036\064\040\067\041\066" +
    "\043\065\044\070\045\uffe6\001\002\000\024\015\uffd6\016" +
    "\uffd6\024\uffd6\036\uffd6\040\uffd6\041\uffd6\043\uffd6\044\uffd6" +
    "\045\uffd6\001\002\000\020\023\053\032\054\034\057\042" +
    "\062\046\056\047\012\050\060\001\002\000\022\015\071" +
    "\024\uffe5\036\064\040\067\041\066\043\065\044\070\045" +
    "\uffe5\001\002\000\024\015\071\016\uffd8\024\uffd8\036\uffd8" +
    "\040\uffd8\041\uffd8\043\uffd8\044\uffd8\045\uffd8\001\002\000" +
    "\024\015\071\016\uffdb\024\uffdb\036\uffdb\040\uffdb\041\066" +
    "\043\065\044\070\045\uffdb\001\002\000\024\015\071\016" +
    "\uffd9\024\uffd9\036\uffd9\040\uffd9\041\uffd9\043\uffd9\044\070" +
    "\045\uffd9\001\002\000\024\015\071\016\uffda\024\uffda\036" +
    "\uffda\040\uffda\041\uffda\043\uffda\044\070\045\uffda\001\002" +
    "\000\024\015\071\016\uffdc\024\uffdc\036\uffdc\040\067\041" +
    "\066\043\065\044\070\045\uffdc\001\002\000\004\022\110" +
    "\001\002\000\014\010\ufff5\022\ufff5\025\ufff5\031\ufff5\047" +
    "\ufff5\001\002\000\004\023\112\001\002\000\004\024\113" +
    "\001\002\000\024\015\uffd5\016\uffd5\024\uffd5\036\uffd5\040" +
    "\uffd5\041\uffd5\043\uffd5\044\uffd5\045\uffd5\001\002\000\020" +
    "\015\071\024\115\036\064\040\067\041\066\043\065\044" +
    "\070\001\002\000\024\015\uffdd\016\uffdd\024\uffdd\036\uffdd" +
    "\040\uffdd\041\uffdd\043\uffdd\044\uffdd\045\uffdd\001\002\000" +
    "\022\013\042\021\051\022\117\025\023\030\050\031\027" +
    "\035\043\047\044\001\002\000\026\013\uffe2\021\uffe2\022" +
    "\uffe2\025\uffe2\026\uffe2\030\uffe2\031\uffe2\033\uffe2\035\uffe2" +
    "\047\uffe2\001\002\000\020\023\053\032\054\034\057\042" +
    "\062\046\056\047\012\050\060\001\002\000\020\015\071" +
    "\024\122\036\064\040\067\041\066\043\065\044\070\001" +
    "\002\000\014\013\042\021\051\030\050\035\043\047\012" +
    "\001\002\000\004\026\124\001\002\000\014\013\042\021" +
    "\051\030\050\035\043\047\012\001\002\000\026\013\uffe1" +
    "\021\uffe1\022\uffe1\025\uffe1\026\uffe1\030\uffe1\031\uffe1\033" +
    "\uffe1\035\uffe1\047\uffe1\001\002\000\020\023\053\032\054" +
    "\034\057\042\062\046\056\047\012\050\060\001\002\000" +
    "\020\015\071\016\130\036\064\040\067\041\066\043\065" +
    "\044\070\001\002\000\026\013\uffe3\021\uffe3\022\uffe3\025" +
    "\uffe3\026\uffe3\030\uffe3\031\uffe3\033\uffe3\035\uffe3\047\uffe3" +
    "\001\002\000\020\023\053\032\054\034\057\042\062\046" +
    "\056\047\012\050\060\001\002\000\020\015\071\024\133" +
    "\036\064\040\067\041\066\043\065\044\070\001\002\000" +
    "\014\013\042\021\051\030\050\035\043\047\012\001\002" +
    "\000\026\013\uffe0\021\uffe0\022\uffe0\025\uffe0\026\uffe0\030" +
    "\uffe0\031\uffe0\033\uffe0\035\uffe0\047\uffe0\001\002\000\004" +
    "\006\136\001\002\000\004\015\137\001\002\000\004\007" +
    "\140\001\002\000\004\023\141\001\002\000\020\023\053" +
    "\032\054\034\057\042\062\046\056\047\012\050\060\001" +
    "\002\000\020\015\071\024\143\036\064\040\067\041\066" +
    "\043\065\044\070\001\002\000\004\016\144\001\002\000" +
    "\026\013\uffe4\021\uffe4\022\uffe4\025\uffe4\026\uffe4\030\uffe4" +
    "\031\uffe4\033\uffe4\035\uffe4\047\uffe4\001\002\000\006\024" +
    "\uffed\045\uffed\001\002\000\010\025\023\031\027\047\022" +
    "\001\002\000\006\024\uffe9\045\uffe9\001\002\000\004\016" +
    "\151\001\002\000\026\010\ufff1\013\ufff1\021\ufff1\022\ufff1" +
    "\025\ufff1\030\ufff1\031\ufff1\033\ufff1\035\ufff1\047\ufff1\001" +
    "\002\000\004\021\ufff9\001\002\000\004\021\154\001\002" +
    "\000\004\010\155\001\002\000\004\011\156\001\002\000" +
    "\004\014\157\001\002\000\004\005\160\001\002\000\004" +
    "\023\161\001\002\000\004\012\162\001\002\000\004\017" +
    "\163\001\002\000\004\020\164\001\002\000\004\047\012" +
    "\001\002\000\004\024\166\001\002\000\004\021\167\001" +
    "\002\000\014\013\042\021\051\030\050\035\043\047\012" +
    "\001\002\000\004\022\171\001\002\000\004\022\172\001" +
    "\002\000\006\002\uffff\004\uffff\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\004\004\152\001\001\000\004\005\006\001\001" +
    "\000\004\006\007\001\001\000\002\001\001\000\004\004" +
    "\012\001\001\000\002\001\001\000\004\007\014\001\001" +
    "\000\004\004\151\001\001\000\002\001\001\000\004\010" +
    "\016\001\001\000\010\011\025\013\020\014\017\001\001" +
    "\000\002\001\001\000\004\004\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\030\001\001\000\002\001\001\000\012\013\034\015\033" +
    "\016\035\017\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\040\001\001\000\012\004\046\013" +
    "\020\014\045\022\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\115" +
    "\001\001\000\006\004\054\023\060\001\001\000\006\004" +
    "\054\023\113\001\001\000\004\004\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\054\023\062\001\001" +
    "\000\002\001\001\000\006\004\054\023\105\001\001\000" +
    "\006\004\054\023\104\001\001\000\006\004\054\023\103" +
    "\001\001\000\006\004\054\023\102\001\001\000\006\004" +
    "\054\023\101\001\001\000\004\004\071\001\001\000\002" +
    "\001\001\000\012\004\054\020\074\021\073\023\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\054\023\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\046\013\020\014\045\022\044\001\001\000\002" +
    "\001\001\000\006\004\054\023\120\001\001\000\002\001" +
    "\001\000\006\004\046\022\122\001\001\000\002\001\001" +
    "\000\006\004\046\022\124\001\001\000\002\001\001\000" +
    "\006\004\054\023\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\054\023\131\001\001\000\002\001" +
    "\001\000\006\004\046\022\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\054\023\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\034\015\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\046\022\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


/* Classes utilitaires pour construction de paires de listes */
  class KlassBody { /* classBody = (Var|Method)*  */
    AstList<Var> vars;     AstList<Method> methods;
    KlassBody() {this.vars=new AstList<>(); this.methods=new AstList<>(); }
    AstList<Var> getVars() { return this.vars; }
    AstList<Method> getMethods() { return this.methods; }
  }
  class MethBody  { /* methodBody = (Var|Stmt)*  */
    AstList<Var> vars;     AstList<Stmt> stmts;
    MethBody()  {this.vars=new AstList<>(); this.stmts=new AstList<>(); }
    AstList<Var> getVars() { return this.vars; }
    AstList<Stmt> getStmts() { return this.stmts; }
  }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // axiom ::= klassMain klassList 
            {
              Axiom RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		KlassMain a = (KlassMain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		AstList<Klass> z = (AstList<Klass>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Axiom(a, z);
                     RESULT.addPosition(axleft, zxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= axiom EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Axiom start_val = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // klassMain ::= CLASS ident LC PUBLIC STATIC VOID MAIN LP STRING LB RB ident RP LC stmt RC RC 
            {
              KlassMain RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-16)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).xright;
		Ident b = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xright;
		Ident c = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Stmt d = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new KlassMain(b, c, d);
                     RESULT.addPosition(axleft, zxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("klassMain",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ident ::= IDENT 
            {
              Ident RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Ident(a);
                     RESULT.addPosition(axleft, axright);                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // klassList ::= 
            {
              AstList<Klass> RESULT =null;
		 RESULT = new AstList<>();            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("klassList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // klassList ::= klassList klass 
            {
              AstList<Klass> RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		AstList<Klass> a = (AstList<Klass>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Klass z = (Klass)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(z);
                     RESULT.addPosition(axleft, zxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("klassList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // klass ::= CLASS ident parent LC klassBody RC 
            {
              Klass RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		Ident i = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Ident p = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location kxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location kxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		KlassBody k = (KlassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Klass(i, p, k.getVars(), k.getMethods());       
                     RESULT.addPosition(axleft, zxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("klass",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parent ::= 
            {
              Ident RESULT =null;
		 RESULT = new Ident("Object"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parent",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parent ::= EXTENDS ident 
            {
              Ident RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Ident z = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = z;
                    RESULT.addPosition(axleft, zxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parent",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // klassBody ::= 
            {
              KlassBody RESULT =null;
		 RESULT = new KlassBody();            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("klassBody",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // klassBody ::= klassBody variable 
            {
              KlassBody RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		KlassBody a = (KlassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Var z = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.vars.add(z);      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("klassBody",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // klassBody ::= klassBody method 
            {
              KlassBody RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		KlassBody a = (KlassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Method z = (Method)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.methods.add(z);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("klassBody",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method ::= PUBLIC type ident LP formals RP LC methBody RETURN expr SEMI RC 
            {
              Method RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).xright;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).xright;
		Ident i = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).xright;
		AstList<Formal> f = (AstList<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		MethBody m = (MethBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Method(t, i, f, m.getVars(), m.getStmts(), e);
                     RESULT.addPosition(axleft, zxright);                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // methBody ::= 
            {
              MethBody RESULT =null;
		 RESULT = new MethBody();             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methBody",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // methBody ::= methBody variable 
            {
              MethBody RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		MethBody a = (MethBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Var z = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.vars.add(z);      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methBody",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // methBody ::= methBody stmt 
            {
              MethBody RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		MethBody a = (MethBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Stmt z = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.stmts.add(z);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methBody",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variable ::= type ident SEMI 
            {
              Var RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Ident b = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Var(a, b);
                     RESULT.addPosition(axleft, zxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= IDENT 
            {
              Type RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type(a);
                     RESULT.addPosition(axleft, axright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= INT 
            {
              Type RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type(main.EnumType.INT);
                     RESULT.addPosition(axleft, axright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= BOOL 
            {
              Type RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type(main.EnumType.BOOL);
                     RESULT.addPosition(axleft, axright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // formal ::= type ident 
            {
              Formal RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Ident z = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Formal(a, z);
                     RESULT.addPosition(axleft, zxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formals ::= 
            {
              AstList<Formal> RESULT =null;
		 RESULT = new AstList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formals ::= formals1 
            {
              AstList<Formal> RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		AstList<Formal> a = (AstList<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
                     RESULT.addPosition(axleft, axright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formals1 ::= formal 
            {
              AstList<Formal> RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Formal a = (Formal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AstList<>(); RESULT.add(a);
                     RESULT.addPosition(axleft, axright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // formals1 ::= formals1 COMMA formal 
            {
              AstList<Formal> RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		AstList<Formal> a = (AstList<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Formal z = (Formal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(z);
                     RESULT.addPosition(axleft, zxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // args ::= 
            {
              AstList<Expr> RESULT =null;
		 RESULT = new AstList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // args ::= args1 
            {
              AstList<Expr> RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		AstList<Expr> a = (AstList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
                     RESULT.addPosition(axleft, axright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // args1 ::= expr 
            {
              AstList<Expr> RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AstList<>(); RESULT.add(a);
                     RESULT.addPosition(axleft, axright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // args1 ::= args1 COMMA expr 
            {
              AstList<Expr> RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		AstList<Expr> a = (AstList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr z = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(z);
                     RESULT.addPosition(axleft, zxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= SYSTEM DOT OUT DOT PRINTLN LP expr RP SEMI 
            {
              Stmt RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StmtPrint(b);
                     RESULT.addPosition(axleft, zxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= ident ASSIGN expr SEMI 
            {
              Stmt RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Ident a = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StmtAssign(a, b);
                     RESULT.addPosition(axleft, zxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= LC methBody RC 
            {
              Stmt RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		MethBody b = (MethBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StmtBlock(b.vars,b.stmts);
                     RESULT.addPosition(axleft, zxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= IF LP expr RP stmt ELSE stmt 
            {
              Stmt RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Stmt c = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Stmt z = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StmtIf(b, c, z);
                     RESULT.addPosition(axleft, zxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= WHILE LP expr RP stmt 
            {
              Stmt RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Stmt z = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StmtWhile(b, z);
                     RESULT.addPosition(axleft, zxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= LIT_INT 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprLiteralInt(a);
                     RESULT.addPosition(axleft, axright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= LIT_BOOL 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprLiteralBool(a);
                     RESULT.addPosition(axleft, axright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= LP expr RP 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b;
                     RESULT.addPosition(axleft, zxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr AND expr 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr z = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprOpBin(a, main.EnumOper.AND, z);
                     RESULT.addPosition(axleft, zxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr LESS expr 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr z = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprOpBin(a, main.EnumOper.LESS, z);
                     RESULT.addPosition(axleft, zxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr PLUS expr 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr z = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprOpBin(a, main.EnumOper.PLUS, z);
                     RESULT.addPosition(axleft, zxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr MINUS expr 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr z = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprOpBin(a, main.EnumOper.MINUS, z);
                     RESULT.addPosition(axleft, zxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr TIMES expr 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr z = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprOpBin(a, main.EnumOper.TIMES, z);
                     RESULT.addPosition(axleft, zxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= NOT expr 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr z = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprOpUn(main.EnumOper.NOT, z);
                     RESULT.addPosition(axleft, zxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr DOT ident LP args RP 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xright;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Ident b = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		AstList<Expr> c = (AstList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprCall(a, b, c);
                     RESULT.addPosition(axleft, zxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= NEW ident LP RP 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Ident b = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNew(b);
                     RESULT.addPosition(axleft, zxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= ident 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Ident a = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprIdent(a);
                     RESULT.addPosition(axleft, axright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= THIS 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprIdent(new Ident("this"));
                     RESULT.addPosition(axleft, axright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
